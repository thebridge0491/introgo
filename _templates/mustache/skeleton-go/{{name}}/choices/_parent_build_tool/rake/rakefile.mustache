RAKE = ENV['RAKE'] ? ENV['RAKE'] : 'rake'
# Multi-package project rakefile script.
require 'rake/clean'
require 'rake/packagetask'

[CLEAN, CLOBBER, Rake::FileList::DEFAULT_IGNORE_PATTERNS].each{|a| a.clear}
CLEAN.include("**/core*", "**/*~", "**/*.o", "**/*.log", ".coverage")
CLOBBER.include("build/*", "build/.??*")

def _get_task_opts(options={})
  require 'optparse'
  
  o = OptionParser.new do |opts|
    opts.banner = "Usage: #{RAKE} <opts_task> [options]"
    opts.on("-a OPTS", "--args OPTS") { |args| options[:args] = args }
  end
  options[:leftovers] = o.parse(o.order(ARGV) {})
  options
end

desc "Task example with opts: #{RAKE} _opts_task -- -a '-h'"
task :_opts_task do
  options = _get_task_opts #({ args: '' })
  puts "Options were: #{options[:args]}"
end

desc "Task example with args: #{RAKE} _args_task\[arg1,arg2\]"
task :_args_task, [:arg1] do |t, args|
  puts "Args were: #{args[:arg1]} #{args.extras.join(' ')}"
end

#sh "export PATH = #{ENV['PATH']}:`go env GOPATH`/bin"
sh "export GOPATH = `go env GOPATH`"

parent, version = '{{parent}}{{^parent}}introgo{{/parent}}', '0.1.0'
SUBDIRS = ENV['SUBDIRS'] ? ENV['SUBDIRS'].split() : 'introutil intromain'.split()

desc 'configure \[opt1,opt2\]'
task :configure, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX| 
    cd(dirX) { 
      sh "sh ./configure.sh #{opts[:opt1]} #{opts.extras.join(' ')}" } }
end

desc "Default target: #{RAKE} help"
task :default => [:help]

desc "Help info"
task :help do |task_name|
  SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} #{task_name}" } }
  puts "##### Top-level multiproject: #{parent} #####"
  puts "Usage: #{RAKE} [SUBDIRS=#{SUBDIRS.join(' ')}] [task]"
  sh "#{RAKE} -T"
end

task :subclean do
	SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} clean" } }
end
task :subclobber do
	SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} clobber" } }
end
task :clean => [:subclean]
task :clobber => [:subclobber]

desc 'Compile target(s): rake build\[opt1,opt2\]'
task :build, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX| cd(dirX) { sh "go build #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX}" } }
end

desc 'Uninstall product(s): rake uninstall\[opt1,opt2\]'
task :uninstall, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX| cd(dirX) { sh "go clean -i #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX}" } }
end

desc 'Install product(s): rake install\[opt1,opt2\]'
task :install, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX| cd(dirX) { sh "go install #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX}" } }
end

desc 'Compile test target(s): rake testCompile\[opt1,opt2\]'
task :testCompile, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX|
  if "1" == "#{DEBUG}"
    cd(dirX) { sh "go test -c -cover #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX}" }
  else
    cd(dirX) { sh "go test -c #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX}" }
  end
  }
end

desc 'Run test(s): rake test\[topt1,topt2\]'
task :test, [:topt1] do |task_name, topts|
  SUBDIRS.each { |dirX|
  if "1" == "#{DEBUG}"
    cd(dirX) { sh "./#{dirX}.test -test.coverprofile=build/cover_#{dirX}.out #{topts[:topt1]} #{topts.extras.join(' ')}" }
  else
    cd(dirX) { sh "./#{dirX}.test #{topts[:topt1]} #{topts.extras.join(' ')}" }
  end
  }
end

#----------------------------------------
file "build/#{parent}-#{version}" do |p|
  mkdir_p(p.name)
  # sh "zip -9 -q --exclude @exclude.lst -r - . | unzip -od #{p.name} -"
  sh "tar --format=posix --dereference --exclude-from=exclude.lst -cf - . | tar -xpf - -C #{p.name}"
end

if defined? Rake::PackageTask
  Rake::PackageTask.new(parent, version) do |p|
    # task("build/#{parent}-#{version}").invoke
    
    ENV.fetch('FMTS', 'tar.gz').split(',').each{|fmt|
      if p.respond_to? "need_#{fmt.tr('.', '_')}="
        p.send("need_#{fmt.tr('.', '_')}=", true)
      else
        p.need_tar_gz = true
      end
    }
    task(:package).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}]"
    task(:repackage).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}]"
  end
  
  task :subpackage do
	SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} package"}}
  end
  task :subrepackage do
	SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} repackage"}}
  end
  task :package => :subpackage
  task :repackage => :subrepackage
else
  desc "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}] Package project distribution"
  task :dist => ["build/#{parent}-#{version}"] do |t|
    distdir = "#{parent}-#{version}"
    
    ENV.fetch('FMTS', 'tar.gz').split(',').each{|fmt|
      case fmt
      when 'zip'
        rm_rf("build/#{distdir}.zip") || true
        cd('build') {sh "zip -9 -q -r #{distdir}.zip #{distdir}" || true}
      else
        #tarext = `echo #{fmt} | grep -e '^tar$' -e '^tar.xz$' -e '^tar.bz2$' || echo tar.gz`.chomp
        tarext = fmt.match(%r{(^tar$|^tar.xz$|^tar.bz2$)}) ? fmt : 'tar.gz'
        rm_rf("build/#{distdir}.#{tarext}") || true
        cd('build') {sh "tar --posix -L -caf #{distdir}.#{tarext} #{distdir}" || true}
      end
    }
    rm_rf("build/#{distdir}") || true
    SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} #{task_name}"}}
  end
end

desc 'Generate API documentation(s): rake doc\[opt1,opt2\]'
task :doc, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX|
    cd(dirX) {
      rm_f("build/doc_#{dirX}.txt")
      sh "go doc -all #{opts[:opt1]} #{opts.extras.join(' ')} #{dirX} >> build/doc_#{dirX}.txt" }
  }
end

desc 'Lint check(s): rake lint\[opt1,opt2\]'
task :lint, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX|
    cd(dirX) {
      rm_f("build/lint_#{dirX}.txt")
      sh "#{ENV['GOPATH']}/bin/golint #{opts[:opt1]} #{opts.extras.join(' ')} .../#{dirX} >> build/lint_#{dirX}.txt" }
  }
end

desc 'Report code coverage(s)'
task :report do |task_name|
  SUBDIRS.each { |dirX|
    cd(dirX) {
      sh "go tool cover -html=build/cover_#{dirX}.out -o build/cover_#{dirX}.html ; go tool cover -func=build/cover_#{dirX}.out" }
  }
end

desc 'Run main: rake run\[arg1,arg2\]'
task :run, [:arg1] do |task_name, args|
  SUBDIRS.each { |dirX| 
    if File.exist?("#{ENV['GOPATH']}/bin/#{dirX}")
      cd(dirX) { sh "#{ENV['GOPATH']}/bin/#{dirX} #{args[:arg1]} #{args.extras.join(' ')}" }
    end
  }
end
